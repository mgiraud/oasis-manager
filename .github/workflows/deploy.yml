# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup PHP with PCOV
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          ini-values: pcov.directory=api #optional, see above for usage.
          coverage: pcov
    
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
    
      - uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '11'
          postgresql db: db_oasis_manager_test
          postgresql user: postgres
          postgresql password: password
        
      - name: Wait / Sleep
        uses: jakejarvis/wait-action@v0.1.0
        with:
          time: '5s'
   
      - name: Collect Docker Logs
        uses: jwalton/gh-docker-logs@v1.0.0
   
      - name: Check running containers
        run: docker ps -a
      
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install php dependencies
        run: composer install --no-progress --no-scripts

      - name: Create psql database
        run:  php ./bin/console doctrine:schema:create --env=test
      
      - name: Run tests
        run: vendor/bin/paraunit coverage --text --html=coverage/
        
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/
          retention-days: 5

      - name: 'Install app dependencies'
        run: yarn install

      - name: 'Build the app'
        run: yarn build

      - name: 'Deploy to server'
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: "./"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          EXCLUDE: "/app/"

      - name: 'Executing deploy app'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_DEPLOY_KEY }}
          script: |
            cloudlinux-selector --interpreter nodejs --user ztvj7946 --restart-webapp testapp
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
